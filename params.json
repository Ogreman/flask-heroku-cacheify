{"name":"flask-heroku-cacheify","tagline":"Automatic Flask cache configuration on Heroku.","body":"# flask-heroku-cacheify\r\n\r\nAutomatic Flask cache configuration on Heroku.\r\n\r\n![Thinking Man Sketch](https://raw.github.com/rdegges/flask-heroku-cacheify/master/assets/thinking-man-sketch.jpg)\r\n\r\n\r\n## Purpose\r\n\r\nConfiguring your cache on Heroku can be a time sink.  There are lots of\r\ndifferent caching addons available on Heroku (Redis, Memcached, etc.), and among\r\nthose -- lots of competitors.\r\n\r\n`flask-heroku-cacheify` makes your life easy by automatically configuring your\r\nFlask application to work with whatever caching addons you've got provisioned\r\non Heroku, allowing you to easily swap out addon providers at will, without any\r\ntrouble.  And, just in case you don't have any suitable Heroku addons available,\r\n`flask-heroku-cacheify` will default back to using local memory for your cache!\r\n\r\nInstead of looking through documentation, testing stuff out, etc.,\r\n`flask-heroku-cacheify` will just do everything for you :)\r\n\r\n\r\n## Install\r\n\r\nTo install `flask-heroku-cacheify`, use [pip](http://pip.readthedocs.org/en/latest/).\r\n\r\n```bash\r\n$ pip install flask-heroku-cacheify\r\n```\r\n\r\n**NOTE**: If you're install `flask-heroku-cacheify` locally, you'll need to\r\nhave `libmecached-dev` installed on your OS (with SASL support).\r\n\r\nNext, modify your `requirements.txt` file in your home directory, and add the\r\nfollowing to the bottom of your file:\r\n\r\n```bash\r\nFlask-Heroku-Cacheify>=1.2\r\npylibmc>=1.2.3\r\n```\r\n\r\nThe above will ensure that Heroku pulls in the required C header files (in case\r\nyou decide to use memcached).  This step is **required**.\r\n\r\n\r\n## Pick an Addon\r\n\r\nHeroku has lots of available addons you can use for caching.\r\n`flask-heroku-cacheify` currently works with them all!  That means no matter\r\nwhich option you choose, your cache will work out of the box, guaranteed!\r\n\r\nBelow is a list of the addons you can install to get started, you should have at\r\nleast one of these activated on your Heroku app -- otherwise, your cache will be\r\nin 'local memory' only, and won't be very useful.\r\n\r\n- [MemCachier](https://addons.heroku.com/memcachier)\r\n- [RedisGreen](https://addons.heroku.com/redisgreen)\r\n- [MyRedis](https://addons.heroku.com/myredis)\r\n- [Redis Cloud](https://addons.heroku.com/rediscloud)\r\n- [Redis To Go](https://addons.heroku.com/redistogo)\r\n- [openredis](https://addons.heroku.com/openredis)\r\n\r\n**NOTE** My favorite providers are MemCachier (for memcache), and openredis for\r\nredis.  Both are equally awesome as cache providers.  If you're in need of a\r\nstable cache provider for large applications, I'd recommend\r\n[RedisGreen](https://addons.heroku.com/redisgreen) -- they use dedicated EC2\r\ninstances (which greatly improves your server power) and have an excellent\r\ninterface.\r\n\r\n\r\n## Usage\r\n\r\nUsing `flask-heroku-cacheify` is *super easy*!  In your `app.py` (or wherever\r\nyou define your Flask application), add the following:\r\n\r\n```python\r\nfrom flask.ext.cacheify import init_cacheify\r\n\r\napp = Flask(__name__)\r\ncache = init_cacheify(app)\r\n```\r\n\r\nOnce you've got your `cache` global defined, you can use it anywhere in your\r\nFlask app:\r\n\r\n```python\r\n>>> from app import cache\r\n>>> cache.set('hi', 'there', 30)\r\n>>> cache.get('hi')\r\n'there'\r\n```\r\n\r\nHow does this work?  In the background, `flask-heroku-cacheify` is really just\r\nautomatically configuring the popular\r\n[Flask-Cache](http://pythonhosted.org/Flask-Cache/) extension!  This means, you\r\ncan basically skip down to [this\r\npart](http://pythonhosted.org/Flask-Cache/#caching-view-functions) of their\r\ndocumentation, and begin using all the methods listed there, without worrying\r\nabout setting up your caches!  Neat, right?\r\n\r\nFor more information and examples of how to use your cache, don't forget to read\r\nthe [Flask-Cache](http://pythonhosted.org/Flask-Cache/) documentation.\r\n\r\n\r\n## Like This?\r\n\r\nLike this software?  If you really enjoy `flask-heroku-cacheify`, you can show\r\nyour appreciation by:\r\n\r\n- Sending me some bitcoin, my address is: **17BE6Q6fRgxJutnn8NsQgeKnACFjzWLbQT**\r\n- Tipping me on [gittip](https://www.gittip.com/rdegges/).\r\n\r\nEither way, thanks!  <3\r\n\r\n\r\n## Changelog\r\n\r\nv1.2: 04-18-2013\r\n\r\n    - Adding proper documentation.\r\n\r\nv1.1: 04-18-2013\r\n\r\n    - Adding support for MyRedis.\r\n    - Adding support for Redis Cloud.\r\n    - Adding support for Redis To Go.\r\n    - Adding support for openredis.\r\n\r\nv1.0: 04-18-2013\r\n\r\n    - Fixing bug with RedisGreen support.\r\n\r\nv0.9: 04-18-2013\r\n\r\n    - First *real* release! Supports MemCachier and RedisGreen!\r\n\r\nv0.8: 04-18-2013\r\n\r\n    - Pushing eigth release to PyPI (don't use this still!).\r\n\r\nv0.7: 04-18-2013\r\n\r\n    - Pushing seventh release to PyPI (don't use this still!).\r\n\r\nv0.6: 04-18-2013\r\n\r\n    - Pushing sixth release to PyPI (don't use this still!).\r\n\r\nv0.5: 04-18-2013\r\n\r\n    - Pushing fifth release to PyPI (don't use this still!).\r\n\r\nv0.4: 04-18-2013\r\n\r\n    - Pushing fourth release to PyPI (don't use this still!).\r\n\r\nv0.3: 04-18-2013\r\n\r\n    - Pushing third release to PyPI (don't use this still!).\r\n\r\nv0.2: 04-18-2013\r\n\r\n    - Pushing second release to PyPI (don't use this still!).\r\n\r\nv0.1: 04-18-2013\r\n\r\n    - Pushing first release to PyPI (don't use this yet!).\r\n\r\nv0.0: 04-14-2013\r\n\r\n    - Started work >:)\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}